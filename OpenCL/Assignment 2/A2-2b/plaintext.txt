ABCXYZModern processor architextures have embraced parallelism as an important pathway to increase 
performance. Facing technical challenges with higher clock speeds in a fixed power envelope, 
Central Processing Units (CPUs) now improve performance by adding multiple cores. Graphics 
Processing Units (GPUs) have also evolved from fixed function rendering devices into 
programmable parallel processors. As today's computer systems often include highly parallel 
CPUs, GPUs and other types of processors, it is important to enable software developers to take 
full advantage of these heterogeneous processing platforms.

Creating applications for heterogeneous parallel processing platforms is challenging as 
traditional programming approches for multi-core CPUs and GPUs are very different. CPU based 
parallel programming models are typically based on standards but usually assume a shared 
address space and do not emcompass vector operations. General purpose GPU programming 
models address complex memory hierarchies and vector operations but are traditionally 
platform-, vecdor- or hardware-specific. These limitations make it difficult for a developer to 
access the compute power of heterogeneous CPUs, GPUs and other types of processors from a 
single, multi-platform source code base. More than ever, there is a need to enable software 
developers to effectively take full advantage of heterogeneous processing platforms - from high 
performance compute servers, through desktop computer systems to handheld devices - that 
include a diverse mix of parallel CPUs, GPUs and other processors such as DSPs and the 
Cell/B.E. processor.
